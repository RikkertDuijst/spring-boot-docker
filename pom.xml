<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>guru.springframework</groupId>
	<artifactId>spring-boot-docker</artifactId>
	<version>0.0.2-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>spring-boot-docker</name>
	<description>Spring Framework Guru Docker Course</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>

		<!--set this to your docker acct name-->
		<docker.image.prefix>springframeworkguru</docker.image.prefix>

		<!--Set to name of project-->
		<docker.image.name>springbootdocker</docker.image.name>

	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<!--testing deps-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.30.0</version>

				<configuration>

					<!--TODO: how to make this platform independent (running on a mac now, which is unix based):-->
                    <!--<dockerHost>http://127.0.0.1:2375</dockerHost>-->
                    <dockerHost>unix:///var/run/docker.sock</dockerHost>

                    <verbose>true</verbose>
					<images>
						<image>
							<name>${docker.image.prefix}/${docker.image.name}</name>
							<build>
								<!--TODO: see if there's a way to generate a Dockerfile, so we won't have hardcoded version references anymore (so injecting maven's project properties etc)-->
								<dockerFileDir>${project.basedir}/src/main/docker/</dockerFileDir>

                                <!--copies artficact to docker build dir in target-->
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<tags>
									<tag>latest</tag>
									<tag>${project.version}</tag>
								</tags>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>



			<!--To be revisited once we're diving into kubernetes/openshift-->
			<!--<plugin>-->
				<!--<groupId>io.fabric8</groupId>-->
				<!--<artifactId>fabric8-maven-plugin</artifactId>-->
				<!--<version>4.1.0</version>-->

				<!--<configuration>-->
					<!--&lt;!&ndash;&lt;!&ndash;<dockerHost>http://127.0.0.1:2375</dockerHost>&ndash;&gt;&ndash;&gt;-->
					<!--&lt;!&ndash;<dockerHost>unix:///var/run/docker.sock</dockerHost>&ndash;&gt;-->

					<!--<verbose>true</verbose>-->
					<!--<images>-->
						<!--<image>-->
							<!--&lt;!&ndash; Replace your-project-name &ndash;&gt;-->
							<!--&lt;!&ndash;<name>your-project-name:${project.version}</name>&ndash;&gt;-->
							<!--<name>${docker.image.prefix}/${docker.image.name}</name>-->

							<!--<build>-->

								<!--&lt;!&ndash; This is the same FROM used in a Dockerfile &ndash;&gt;-->
								<!--&lt;!&ndash;<from>vixns/java8</from>&ndash;&gt;-->
								<!--<from>openjdk</from>-->

								<!--&lt;!&ndash;TODO: how to provide volume&ndash;&gt;-->
								<!--&lt;!&ndash;<volume>/tmp</volume>&ndash;&gt;-->

								<!--&lt;!&ndash; This is the same ENTRYPOINT used in a Dockerfile &ndash;&gt;-->
								<!--<entryPoint>-->
									<!--<exec>-->
										<!--<arg>java</arg>-->
										<!--&lt;!&ndash; This extra argument is so Tomcat can start faster due to lack of entropy &ndash;&gt;-->
										<!--<arg>-Djava.security.egd=file:/dev/./urandom</arg>-->
										<!--<arg>-jar</arg>-->
										<!--&lt;!&ndash; /maven/ is the default dir that the plugin copies your artifact to &ndash;&gt;-->
										<!--<arg>/maven/${project.artifactId}.${project.packaging}</arg>-->
									<!--</exec>-->
								<!--</entryPoint>-->

								<!--<assembly>-->
									<!--&lt;!&ndash; This is a predefined assembly.xml that will only copy your final artifact to the Docker image &ndash;&gt;-->
									<!--<descriptorRef>artifact</descriptorRef>-->
								<!--</assembly>-->
								<!--<tags>-->
									<!--<tag>latest</tag>-->
									<!--<tag>${project.version}</tag>-->
								<!--</tags>-->
							<!--</build>-->
						<!--</image>-->
					<!--</images>-->
					<!--<volumes>-->
						<!--<volume>-->

							<!--&lt;!&ndash;<name>scratch</name>&ndash;&gt;-->
							<!--&lt;!&ndash;<type>emptyDir</type>&ndash;&gt;-->
						<!--</volume>-->
					<!--</volumes>-->
				<!--</configuration>-->
			<!--</plugin>-->


			<!--<plugin>-->
				<!--<groupId>io.fabric8</groupId>-->
				<!--<artifactId>docker-maven-plugin</artifactId>-->
				<!--<version>0.20.0</version>-->
				<!--<configuration>-->
					<!--<verbose>true</verbose>-->
					<!--<images>-->
						<!--<image>-->
							<!--<name>demo/helloworld</name>-->
							<!--<build>-->
								<!--<from>openjdk</from>-->
								<!--<tags>-->
									<!--<tag>latest</tag>-->
									<!--<tag>${project.version}</tag>-->
								<!--</tags>-->
								<!--<assembly>-->
									<!--<descriptorRef>artifact</descriptorRef>-->
								<!--</assembly>-->
								<!--<cmd>java -jar maven/${project.artifactId}-${project.version}.jar</cmd>-->
							<!--</build>-->
						<!--</image>-->
					<!--</images>-->
				<!--</configuration>-->
			<!--</plugin>-->







		</plugins>
	</build>

	<repositories>
		<repository>
			<id>maven central</id>
			<url>https://repo.maven.apache.org/maven2</url>
		</repository>
		<repository>
			<id>spring-repo</id>
			<url>https://repo.spring.io/release</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>maven central</id>
			<url>https://repo.maven.apache.org/maven2</url>
		</pluginRepository>
		<pluginRepository>
			<id>spring-repo</id>
			<url>https://repo.spring.io/release</url>
		</pluginRepository>

	</pluginRepositories>
</project>
